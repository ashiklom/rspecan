#+TITLE: PROSPECT traits analysis
#+AUTHOR: Alexey Shiklomanov

* Elisp setup
:PROPERTIES:
:header-args: :tangle no :results silent
:END:

#+BEGIN_SRC emacs-lisp
(setq org-src-window-setup 'other-window
      org-src-preserve-indentation t)
#+END_SRC

* Process data

** Zhihui Wang data
:PROPERTIES:
:header-args: :comments both :tangle scripts/process_spectra/zwang.R
:header-args: :results silent
:Bibtex: cite:wang_2015_leaf 
:END:

Wang, Z., Skidmore, A. K., Darvishzadeh, R., Heiden, U., Heurich, M., & Wang, T., Leaf nitrogen content indirectly estimated by leaf traits derived from the prospect model, IEEE Journal of Selected Topics in Applied Earth Observations and Remote Sensing, 8(6), 3172â€“3182 (2015).  http://dx.doi.org/10.1109/jstars.2015.2422734 

#+BEGIN_SRC R 
import::from(drake, drake_plan, drake_config, make)
import::from(magrittr, "%>%")

pkgconfig::set_config("drake::strings_in_dots" = "literals")

read_raw_data <- function(file, ...) {
  import::from(readxl, read_excel, .into = "")
  import::from(dplyr, mutate, select, everything, .into = "")

  read_excel(file, ...) %>%
    mutate(observation_id = sprintf("zwang_%02d", sample_id)) %>%
    select(observation_id, everything(), -sample_id)
}

extract_metadata <- function(dat, project_metadata) {
  import::from(dplyr, select, matches, transmute, .into = "")
  import::from(metar, add_column_metadata, add_metadata)
  dat %>%
    select(-matches("^[[:digit:]]+$")) %>%
    transmute(
      observation_id = observation_id,
      species_data_code = `Latin_name`,
      leaf_N_per_area = `N_area, g/cm2`,
      leaf_water_thickness = `Cw, g/cm2`,
      leaf_mass_per_area = `Cm, g/cm2`,
      leaf_chltot_per_area = `Cab, ug/cm2`
    ) %>%
    add_column_metadata(
      leaf_N_per_area = list(data_unit = "g cm-2"),
      leaf_water_thickness = list(data_unit = "g cm-2"),
      leaf_mass_per_area = list(data_unit = "g cm-2"),
      leaf_chltot_per_area = list(data_unit = "ug cm-2")
    ) %>%
    add_metadata(!!!project_metadata)
}

extract_spectra <- function(dat, spectra_type) {
  import::from(dplyr, select, matches, mutate, .into = "")
  import::from(tidyr, gather, .into = "")

  dat %>%
    select(observation_id, matches("^[[:digit:]]+$")) %>%
    gather(wavelength, value, -observation_id, na.rm = TRUE) %>%
    mutate(
      wavelength = as.numeric(wavelength),
      spectra_type = !!spectra_type,
      spectra_id = paste(observation_id, spectra_type, sep = "__")
    )
}

zwang_plan <- drake_plan(
  project_metadata = list(
    project_code = "zwang",
    short_name = "Wang et al. 2015",
    long_name = "Wang et al. 2015 Leaf Nitrogen Content Indirectly Estimated By Leaf
                    Traits Derived From the Prospect Model",
    URL = "https://doi.org/10.1109/jstars.2015.2422734",
    site_description = "Bavarian Forest National Park, Germany"
  ),
  raw_data_file = file_in("raw_data/zhihui_wang_protein/Bavaria_dataset_ZW.xlsx"),
  raw_refl = read_raw_data(raw_data_file, sheet = 1),
  raw_trans = read_raw_data(raw_data_file, sheet = 2),
  metadata = extract_metadata(raw_refl, project_metadata),
  refl_spectra = extract_spectra(raw_refl, "R"),
  trans_spectra = extract_spectra(raw_trans, "T"),
  all_spectra = dplyr::bind_rows(refl_spectra, trans_spectra)
)

zwang_plan_config <- drake_config(zwang_plan)
make(zwang_plan)
#+END_SRC

** ECOSTRESS
:PROPERTIES:
:header-args:R: :comments both :tangle scripts/process_spectra/ecostress.R :results output replace drawer :session *R*
:END:

#+NAME: setup
#+BEGIN_SRC R :results none
import::from(drake, drake_plan, drake_config, make, loadd, new_cache)
import::from(magrittr, "%>%")
pkgconfig::set_config("drake::strings_in_dots" = "literals")
options(crayon.enabled = FALSE)

dir.create(".process_caches", showWarnings = FALSE)
cache <- new_cache(".process_caches/ecostress")
#+END_SRC

ECOSTRESS data are stored in plain text files, with one spectrum per file.
In each spectrum file, the first 20 lines are metadata, followed by a blank line, and then the data themselves, in the form "wavelength <tab> reflectance".

This first set of functions parses out the metadata from each spectra file.

#+NAME: read spectra metadata functions
#+BEGIN_SRC R
read_raw_metadata <- function(filename) {
  raw_meta_full <- readLines(filename, n = 100)
  end_metadata <- grep("^[[:space:]]*$", raw_meta_full)
  if (length(end_metadata) != 1) {
    print(raw_meta_full)
    stop("Bad number of endpoints.")
  }
  raw_meta <- raw_meta_full[seq_len(end_metadata - 1)]
  meta_split <- stringr::str_split_fixed(raw_meta, ":", 2)
  meta_colnames <- stringr::str_trim(meta_split[, 1])
  meta_values <- stringr::str_trim(meta_split[, 2])
  names(meta_values) <- meta_colnames

  meta_tbl <- tibble::tibble(!!!meta_values) %>%
    dplyr::mutate(
      spectra_id = paste("ECOSTRESS", `Sample No.`, sep = "__"),
      filename = filename,
      nskip = end_metadata
    )

  meta_tbl
}
#+END_SRC

#+RESULTS: read spectra metadata functions
:RESULTS:
:END:

The ~Origin~ column contains geographic information in the format ~latitude; longitude; CRS~.
The ~parse_origin~ function separates this into the corresponding columns.

#+BEGIN_SRC R
parse_origin <- function(origin_string) {
  coord_list <- stringr::str_split(origin_string, ";")
  if (length(coord_list[[1]]) != 3) {
    return(tibble::tibble(
      latitude = NA,
      longitude = NA,
      CRS = NA
    ))
  }
  tibble::tibble(
    latitude = purrr::map_chr(coord_list, 1) %>% as.numeric(),
    longitude = purrr::map_chr(coord_list, 2) %>% as.numeric(),
    CRS = purrr::map_chr(coord_list, 3) %>% stringr::str_trim()
  )
}
#+END_SRC

#+RESULTS:
:RESULTS:
:END:

This function reads the actual spectra data, which are tab-separated and start on the line given by ~nskip~ (returned as part of the output of ~read_spectra_metadata~).
The output here is a long data frame suitable for ~fst~ storage.

#+NAME: read spectra data function
#+BEGIN_SRC R
read_spectra_data <- function(spectra_metadata) {
  spec_sub <- spectra_metadata %>%
    dplyr::select(filename, nskip, spectra_id, Measurement)

  spec_nest <- spec_sub %>%
    dplyr::mutate(
      spectra_tbl = purrr::map2(
        filename,
        nskip,
        ~readr::read_tsv(.x, skip = .y, col_names = c("wavelength", "value"),
                         col_types = "dd")
      )
    )

  tidyr::unnest(spec_nest) %>%
    dplyr::select(spectra_id, spectra_type = Measurement, wavelength, value)
}
#+END_SRC

#+RESULTS: read spectra data function
:RESULTS:
:END:

This function reads the additional metadata files that come with each spectrum.

#+BEGIN_SRC R
readLines()
#+END_SRC

Finally, the ~drake~ plan for processing the data.

#+NAME: drake plan
#+BEGIN_SRC R
plan <- drake_plan(
  raw_data_dir = "raw_data/ECOSTRESS/vegetation",
  spectra_files = list.files(raw_data_dir, "vegetation\\..*\\.spectrum.txt"),
  spectra_files_full = file.path(raw_data_dir, spectra_files),
  spectra_metadata_raw = purrr::map_dfr(spectra_files_full, read_raw_metadata),
  spectra_metadata = spectra_metadata_raw %>%
    dplyr::mutate(
      coords = suppressWarnings(purrr::map(Origin, parse_origin))
    ) %>%
    tidyr::unnest(coords),
  spectra_data = read_spectra_data(spectra_metadata),
  ancillary_files = list.files(raw_data_dir, "vegetation\\..*\\.ancillary.txt")
)

plan_config <- drake_config(plan, cache = cache)
make(plan, cache = cache)
#+END_SRC

** ACCP

Data from the Accelerated Canopy Chemistry program.

* Run inversions

* Store results
